ARG_ENABLE("oauth2", "enable oauth2", "no");

if (PHP_OAUTH2 != "no") {
  EXTENSION("oauth2", "oauth2.c", null, "-I"+configure_module_dirname);
  ADD_SOURCES(configure_module_dirname + "/kernel", "main.c memory.c exception.c debug.c backtrace.c object.c array.c string.c fcall.c require.c file.c operators.c math.c concat.c variables.c filter.c iterator.c exit.c time.c", "oauth2");
  /* PCRE is always included on WIN32 */
  AC_DEFINE("ZEPHIR_USE_PHP_PCRE", 1, "Whether PHP pcre extension is present at compile time");
  if (PHP_JSON != "no") {
    ADD_EXTENSION_DEP("oauth2", "json");
    AC_DEFINE("ZEPHIR_USE_PHP_JSON", 1, "Whether PHP json extension is present at compile time");
  }
  
  ADD_SOURCES(configure_module_dirname + "/oauth2/storage", "storageinterface.zep.c accesstokeninterface.zep.c scopeinterface.zep.c clientinterface.zep.c jwtaccesstokeninterface.zep.c authorizationcodeinterface.zep.c clientcredentialsinterface.zep.c jwtaccesstoken.zep.c jwtbearerinterface.zep.c publickeyinterface.zep.c refreshtokeninterface.zep.c usercredentialsinterface.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/granttype", "granttypeinterface.zep.c authorizationcode.zep.c clientcredentials.zep.c jwtbearer.zep.c refreshtoken.zep.c usercredentials.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/responsetype", "responsetypeinterface.zep.c accesstokeninterface.zep.c authorizationcodeinterface.zep.c accesstoken.zep.c authorizationcode.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/clientassertiontype", "clientassertiontypeinterface.zep.c httpbasic.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/controller", "resourcecontrollerinterface.zep.c tokencontrollerinterface.zep.c authorizecontrollerinterface.zep.c resourcecontroller.zep.c tokencontroller.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/tokentype", "tokentypeinterface.zep.c bearer.zep.c mac.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2", "scopeinterface.zep.c autoloader.zep.c exception.zep.c requestinterface.zep.c responseinterface.zep.c scope.zep.c server.zep.c", "oauth2");
	ADD_SOURCES(configure_module_dirname + "/oauth2/encryption", "encryptioninterface.zep.c", "oauth2");
  ADD_FLAG("CFLAGS_OAUTH2", "/D ZEPHIR_RELEASE /Oi /Ot /Oy /Ob2 /Gs /GF /Gy /GL");
  ADD_FLAG("CFLAGS", "/D ZEPHIR_RELEASE /Oi /Ot /Oy /Ob2 /Gs /GF /Gy /GL");
  ADD_FLAG("LDFLAGS", "/LTCG");
}
